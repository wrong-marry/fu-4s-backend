name: CI/CD Pipeline

on:
  push:
    branches:
      - ci_pipeline  # Set to whatever branch you want to trigger the deployment.

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 22
        uses: actions/setup-java@v2
        with:
          java-version: '22'
          distribution: 'temurin'  # Using Temurin distribution

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: vnminhhai/fu4s-backend:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - uses: actions/checkout@v2
      - name: Build & Deploy
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{secrets.SERVER_IP}}
          USER_NAME: ${{secrets.SERVER_USER}}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" |
            tr -d '\r' > key.pem
            chmod 600 key.pem
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${HOSTNAME} '
          
          # Stop all containers (prevents errors if any are still running)
          sudo docker stop $(sudo docker ps -aq)
          
          # Remove all containers (frees up resources)
          sudo docker rm -f $(sudo docker ps -aq)
          
          # Remove all unused Docker images (cleans up old images)
          sudo docker image prune -a -f
          
          # Pull the latest image
          sudo docker pull vnminhhai/fu4s-backend:latest
          
          # Run the new container with environment variables
          sudo docker run --name fu4sapp -d -p 8080:8080 \
            -e DB_URL=${{ secrets.DB_URL }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
            vnminhhai/fu4s-backend:latest
          '