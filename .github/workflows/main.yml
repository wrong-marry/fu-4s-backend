name: CI/CD Pipeline

on:
  push:
    branches:
      - unit_test  # Set to whatever branch you want to trigger the deployment.

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 22
        uses: actions/setup-java@v2
        with:
          java-version: '22'
          distribution: 'temurin'  # Using Temurin distribution

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: vnminhhai/fu4s-backend:latest
          build-args: |
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - uses: actions/checkout@v2
      - name: Build & Deploy
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{secrets.SERVER_IP}}
          USER_NAME: ${{secrets.SERVER_USER}}

        run: |
#          echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > key.pem
          chmod 400 key.pem
          ssh -o StrictHostKeyChecking=no -i key.pem ${USER_NAME}@${HOSTNAME} '
          
          # Stop all containers (prevents errors if any are still running)
          docker stop $(docker ps -aq)
          
          # Remove all containers (frees up resources)
          docker rm -f $(docker ps -aq)
          
          # Remove all unused Docker images (cleans up old images)
          docker image prune -a -f
          
          # Pull the latest image
          docker pull vnminhhai/fu4s-backend:latest
          
          # Run the new container with environment variables
          docker run --name fu4sapp -d -p 8080:8080 vnminhhai/fu4s-backend:latest
          '